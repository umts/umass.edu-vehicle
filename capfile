require 'capistrano/version'
load 'deploy' if respond_to?(:namespace) # cap2 differentiator

set :application, "vehicle"
set :repository,  "git://github.com/umts/umass.edu-vehicle.git"
set :scm, "git"

set :oit_location, "/vehicle"
set :deploy_to, "/cwis/http/htdocs#{oit_location}"
set :shared_children, []
set :normalize_asset_timestamps, false
set :user, "vehicle"
set :use_sudo, false

set :deploy_via, :copy
set :copy_strategy, :export
set :copy_remote_dir, deploy_to

role :app, "webadmin.oit.umass.edu"
role :web, "webadmin.oit.umass.edu"

after "deploy:setup", "deploy:htaccess"

namespace :deploy do 
  desc <<-DESC
    This creates a .htaccess file in the deploy directory that redirects
    requests to the deploy directory (ie /vehicle) to the current release
    directory (ie /vehicle/current) behind-the-scenes.  This wouldn't be
    necisary if we had controll over the server.
  DESC
  task :htaccess do
    rewrite_file = <<-EOF
      RewriteEngine On
      RewriteRule ^/cwis.* #{oit_location}/ [R,L]
      RewriteRule (.*) #{oit_location}/current/$1
    EOF
    put rewrite_file, "#{deploy_to}/.htaccess"
  end

  desc <<-DESC
    Deploys code for the first time. For a static site, this is just an
    alias to deploy
  DESC
  task :cold do
    update
  end

  desc <<-DESC
    Clean up old releases. By default, the last 5 releases are kept on each \
    server (though you can change this with the keep_releases variable). All \
    other deployed revisions are removed from the servers.
  DESC
  task :cleanup do
    count = fetch(:keep_releases, 5).to_i

    #All these acrobatics just because OIT's server doesn't have `xargs`. This is the default:
    #run "ls -1dt #{releases_path}/* | tail -n +#{count + 1} | #{try_sudo} xargs rm -rf"
    run "ls -1dt #{releases_path}/* | tail -n +#{count + 1} > #{deploy_to}/CLEANUP"
    run "while read f; do rm -rf $f; done < #{deploy_to}/CLEANUP"
    run "rm -f #{deploy_to}/CLEANUP"
  end

  namespace :rollback do
    task :cleanup, :except => { :no_release => true } do
      run "if [ `ls -l  #{current_path} | sed -e 's/.*-> \\(.*\\)/\\1/'` != #{current_release} ]; then #{try_sudo} rm -rf #{current_release}; fi"
    end
  end
end

# vi: set filetype=ruby :
